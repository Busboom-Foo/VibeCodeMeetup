(()=>{"use strict";var t;!function(t){t.SHORT_FART="SHORT_FART",t.LONG_FART="LONG_FART",t.CIRCLE_FART="CIRCLE_FART",t.SUPER_FART="SUPER_FART",t.MEGA_FART="MEGA_FART",t.ULTRA_FART="ULTRA_FART"}(t||(t={}));class s{constructor(t,s,i,e,h){this.x=t,this.y=s,this.width=i,this.height=e,this.lifetime=h,this.maxLifetime=h,this.dissipationRate=1;const r=Math.floor(100*Math.random())+100,a=Math.floor(50*Math.random())+100;this.color=`rgba(${a}, ${r}, 50, 0.7)`}update(t){this.lifetime-=t*this.dissipationRate,this.width+=5*t,this.height+=5*t}draw(t){const s=this.lifetime/this.maxLifetime*.7,i=`${this.color.substring(0,this.color.lastIndexOf(",")+1)} ${s})`;t.fillStyle=i,t.beginPath(),t.ellipse(this.x,this.y,this.width,this.height,0,0,2*Math.PI),t.fill()}isDissipated(){return this.lifetime<=0}getX(){return this.x}getY(){return this.y}getWidth(){return this.width}getHeight(){return this.height}}class i{constructor(s,i,e){this.width=40,this.height=40,this.speed=5,this.fartPower=1,this.currentFartType=t.SHORT_FART,this.isAlive=!0,this.isFarting=!1,this.fartAnimationTimer=0,this.fartAnimationDuration=.3,this.fartClouds=[],this.x=s,this.y=i,this.canvas=e}update(t){if(this.isAlive){this.isFarting&&(this.fartAnimationTimer+=t,this.fartAnimationTimer>=this.fartAnimationDuration&&(this.isFarting=!1,this.fartAnimationTimer=0));for(let s=this.fartClouds.length-1;s>=0;s--)this.fartClouds[s].update(t),this.fartClouds[s].isDissipated()&&this.fartClouds.splice(s,1)}}draw(t){this.fartClouds.forEach((s=>s.draw(t))),t.save(),t.fillStyle=this.isAlive?this.isFarting?"#77CC77":"#55AA55":"#888888",t.beginPath(),t.ellipse(this.x,this.y,this.width/2,this.height/2,0,0,2*Math.PI),t.fill();const s=this.width/10,i=this.width/4,e=-this.height/6;t.fillStyle="#FFFFFF",t.beginPath(),t.arc(this.x-i,this.y+e,s,0,2*Math.PI),t.arc(this.x+i,this.y+e,s,0,2*Math.PI),t.fill(),t.fillStyle="#000000";const h=s/2;t.beginPath(),t.arc(this.x-i,this.y+e,h,0,2*Math.PI),t.arc(this.x+i,this.y+e,h,0,2*Math.PI),t.fill(),t.strokeStyle="#000000",t.lineWidth=2,t.beginPath(),this.isAlive?t.arc(this.x,this.y+this.height/8,this.width/4,0,Math.PI):(t.moveTo(this.x-i-s,this.y+e-s),t.lineTo(this.x-i+s,this.y+e+s),t.moveTo(this.x-i+s,this.y+e-s),t.lineTo(this.x-i-s,this.y+e+s),t.moveTo(this.x+i-s,this.y+e-s),t.lineTo(this.x+i+s,this.y+e+s),t.moveTo(this.x+i+s,this.y+e-s),t.lineTo(this.x+i-s,this.y+e+s),t.moveTo(this.x-this.width/4,this.y+this.height/4),t.quadraticCurveTo(this.x,this.y+this.height/2,this.x+this.width/4,this.y+this.height/4)),t.stroke(),t.restore(),this.drawFartTypeIndicator(t)}drawFartTypeIndicator(s){if(!this.isAlive)return;const i={[t.SHORT_FART]:"#3498db",[t.LONG_FART]:"#2ecc71",[t.CIRCLE_FART]:"#f1c40f",[t.SUPER_FART]:"#e74c3c",[t.MEGA_FART]:"#9b59b6",[t.ULTRA_FART]:"#1abc9c"}[this.currentFartType]||"#3498db";s.fillStyle=i,s.beginPath(),s.arc(this.x,this.y-this.height/2-10,5,0,2*Math.PI),s.fill()}moveLeft(){this.isAlive&&(this.x-=this.speed,this.x<this.width/2&&(this.x=this.width/2))}moveRight(){this.isAlive&&(this.x+=this.speed,this.x>this.canvas.width-this.width/2&&(this.x=this.canvas.width-this.width/2))}fart(){if(this.isAlive&&!this.isFarting)switch(this.isFarting=!0,this.fartAnimationTimer=0,this.currentFartType){case t.SHORT_FART:this.createShortFart(),this.moveForward(1*this.fartPower);break;case t.LONG_FART:this.createLongFart(),this.moveForward(2*this.fartPower);break;case t.CIRCLE_FART:this.createCircleFart(),this.moveForward(1.5*this.fartPower);break;case t.SUPER_FART:this.createSuperFart(),this.moveForward(2.5*this.fartPower);break;case t.MEGA_FART:this.createMegaFart(),this.moveForward(3*this.fartPower);break;case t.ULTRA_FART:this.createUltraFart(),this.moveForward(4*this.fartPower)}}moveForward(t){this.y-=20*t}createShortFart(){const t=new s(this.x,this.y+this.height/2,20,20,1.5);this.fartClouds.push(t)}createLongFart(){for(let t=0;t<3;t++){const i=new s(this.x,this.y+this.height/2+15*t,20-2*t,20-2*t,2-.3*t);this.fartClouds.push(i)}}createCircleFart(){for(let t=0;t<8;t++){const i=t/8*Math.PI*2,e=this.x+30*Math.cos(i),h=this.y+30*Math.sin(i),r=new s(e,h,15,15,2);this.fartClouds.push(r)}}createSuperFart(){for(let t=0;t<5;t++){const i=new s(this.x,this.y+this.height/2+15*t,25-2*t,25-2*t,2.5-.2*t);this.fartClouds.push(i)}}createMegaFart(){for(let t=0;t<12;t++){const i=t/12*Math.PI*2,e=this.x+40*Math.cos(i),h=this.y+40*Math.sin(i),r=new s(e,h,20,20,3);this.fartClouds.push(r)}}createUltraFart(){for(let t=1;t<=3;t++){const i=8,e=20*t;for(let h=0;h<i;h++){const r=h/i*Math.PI*2,a=this.x+Math.cos(r)*e,o=this.y+Math.sin(r)*e,n=new s(a,o,25-3*t,25-3*t,4-.5*t);this.fartClouds.push(n)}}}hit(){this.isAlive=!1}collectPowerUp(t){this.currentFartType=t,this.fartPower=1.5,setTimeout((()=>{this.fartPower=1}),5e3)}reset(s,i){this.x=s,this.y=i,this.isAlive=!0,this.isFarting=!1,this.currentFartType=t.SHORT_FART,this.fartPower=1,this.fartClouds=[]}getX(){return this.x}getY(){return this.y}getWidth(){return this.width}getHeight(){return this.height}getCurrentFartType(){return this.currentFartType}getFartClouds(){return this.fartClouds}}class e{constructor(t,s,i,e){switch(this.width=80,this.height=40,this.isSlowed=!1,this.slowTimer=0,this.slowDuration=3,this.x=t,this.y=s,this.speed=i,this.originalSpeed=i,e){case"car1":this.carColor="#ff0000";break;case"car2":this.carColor="#0000ff";break;case"car3":this.carColor="#ffcc00";break;default:this.carColor="#888888"}}update(t){this.x+=this.speed*t,this.isSlowed&&(this.slowTimer-=t,this.slowTimer<=0&&(this.isSlowed=!1,this.speed=this.originalSpeed))}draw(t){const s=this.speed>0;t.save(),t.fillStyle=this.carColor,t.fillRect(this.x-this.width/2,this.y-this.height/2,this.width,this.height),t.fillStyle="#222222";const i=.5*this.width,e=.5*this.height,h=this.x-i/2,r=this.y-e/2;t.fillRect(h,r,i,e);const a=.25*this.height,o=.3*this.width;t.fillStyle="#000000",t.beginPath(),t.arc(this.x-o,this.y+.3*this.height,a,0,2*Math.PI),t.arc(this.x+o,this.y+.3*this.height,a,0,2*Math.PI),t.fill();const n=.1*this.height,l=.4*this.width,c=.1*this.height;s?(t.fillStyle="#ffffff",t.beginPath(),t.arc(this.x+l,this.y-c,n,0,2*Math.PI),t.fill(),t.fillStyle="#ff0000",t.beginPath(),t.arc(this.x-l,this.y-c,n,0,2*Math.PI),t.fill()):(t.fillStyle="#ffffff",t.beginPath(),t.arc(this.x-l,this.y-c,n,0,2*Math.PI),t.fill(),t.fillStyle="#ff0000",t.beginPath(),t.arc(this.x+l,this.y-c,n,0,2*Math.PI),t.fill()),t.restore(),this.isSlowed&&this.drawSlowEffect(t)}drawSlowEffect(t){t.fillStyle="rgba(100, 200, 50, 0.3)",t.beginPath(),t.ellipse(this.x,this.y,.7*this.width,.7*this.height,0,0,2*Math.PI),t.fill()}slowDown(){this.isSlowed||(this.isSlowed=!0,this.speed=.4*this.originalSpeed),this.slowTimer=this.slowDuration}isOffScreen(){return this.speed>0?this.x-this.width/2>900:this.x+this.width/2<-100}getX(){return this.x}getY(){return this.y}getWidth(){return this.width}getHeight(){return this.height}}class h{constructor(s,i,e){this.width=30,this.height=30,this.pulseSize=0,this.pulseDirection=1,this.pulseSpeed=2,this.colors={[t.SHORT_FART]:"#3498db",[t.LONG_FART]:"#2ecc71",[t.CIRCLE_FART]:"#f1c40f",[t.SUPER_FART]:"#e74c3c",[t.MEGA_FART]:"#9b59b6",[t.ULTRA_FART]:"#1abc9c"},this.x=s,this.y=i,this.fartType=e}update(t){this.pulseSize+=this.pulseDirection*this.pulseSpeed*t,this.pulseSize>5?this.pulseDirection=-1:this.pulseSize<0&&(this.pulseDirection=1)}draw(s){const i=this.colors[this.fartType];let e;switch(s.fillStyle=i,s.beginPath(),s.arc(this.x,this.y,this.width/2+this.pulseSize,0,2*Math.PI),s.fill(),s.fillStyle="white",s.beginPath(),s.arc(this.x,this.y,this.width/4,0,2*Math.PI),s.fill(),this.fartType){case t.SHORT_FART:e="S";break;case t.LONG_FART:e="L";break;case t.CIRCLE_FART:e="C";break;case t.SUPER_FART:e="SP";break;case t.MEGA_FART:e="M";break;case t.ULTRA_FART:e="U"}s.fillStyle="black",s.font="10px Arial",s.textAlign="center",s.textBaseline="middle",s.fillText(e,this.x,this.y)}isOffScreen(){return this.y>600+this.height}getFartType(){return this.fartType}getX(){return this.x}getY(){return this.y}getWidth(){return this.width}getHeight(){return this.height}}class r{constructor(t,s,i,e){this.level=t,this.carSpawnRate=s,this.carSpeed=i,this.powerUpRate=e}}class a{constructor(){this.keys=new Map,this.keysPressedThisFrame=new Set,this.mouseX=0,this.mouseY=0,this.mouseClicked=!1,window.addEventListener("keydown",(t=>{this.keys.set(t.key,!0),this.keysPressedThisFrame.add(t.key)})),window.addEventListener("keyup",(t=>{this.keys.set(t.key,!1)})),window.addEventListener("mousemove",(t=>{this.mouseX=t.clientX,this.mouseY=t.clientY})),window.addEventListener("mousedown",(()=>{this.mouseClicked=!0})),window.addEventListener("mouseup",(()=>{this.mouseClicked=!1}))}isKeyDown(t){return!0===this.keys.get(t)}isKeyPressed(t){const s=this.keysPressedThisFrame.has(t);return s&&this.keysPressedThisFrame.delete(t),s}isMouseClicked(){const t=this.mouseClicked;return this.mouseClicked=!1,t}getMouseX(){return this.mouseX}getMouseY(){return this.mouseY}update(){this.keysPressedThisFrame.clear()}}class o{checkCollision(t,s){const i=t.getX(),e=t.getY(),h=t.getWidth(),r=t.getHeight(),a=s.getX(),o=s.getY(),n=s.getWidth(),l=s.getHeight();return i+h/2>a-n/2&&i-h/2<a+n/2&&e+r/2>o-l/2&&e-r/2<o+l/2}isPointInObject(t,s,i){const e=i.getX(),h=i.getY(),r=i.getWidth(),a=i.getHeight();return t>=e-r/2&&t<=e+r/2&&s>=h-a/2&&s<=h+a/2}}class n{constructor(){}loadSounds(){}playBackgroundMusic(){}stopBackgroundMusic(){}playFartSound(t){}playHitSound(){}playPowerUpSound(){}playLevelCompleteSound(){}playGameOverSound(){}}class l{constructor(){this.STORAGE_KEY="fartogger_high_scores",this.scores=[],this.loadScores()}addScore(t){this.scores.push(t),this.scores.sort(((t,s)=>s-t)),this.scores.length>10&&(this.scores=this.scores.slice(0,10)),this.saveScores()}getScores(){return[...this.scores]}isHighScore(t){return this.scores.length<10||t>this.scores[this.scores.length-1]}clearScores(){this.scores=[],this.saveScores()}loadScores(){const t=localStorage.getItem(this.STORAGE_KEY);if(t)try{this.scores=JSON.parse(t)}catch(t){console.error("Error parsing stored scores:",t),this.scores=[]}}saveScores(){try{localStorage.setItem(this.STORAGE_KEY,JSON.stringify(this.scores))}catch(t){console.error("Error saving scores:",t)}}}class c{constructor(){this.cars=[],this.powerUps=[],this.fartClouds=[],this.score=0,this.level=1,this.time=60,this.isGameOver=!1,this.isGameRunning=!1,this.lastTimestamp=0,this.levels=[],this.canvas=document.getElementById("game-canvas"),this.ctx=this.canvas.getContext("2d"),this.inputHandler=new a,this.collisionDetector=new o,this.soundManager=new n,this.highScoreManager=new l}initialize(){const t=document.getElementById("start-button"),s=document.getElementById("restart-button");t&&t.addEventListener("click",(()=>this.startGame())),s&&s.addEventListener("click",(()=>this.restartGame())),this.initializeLevels(),this.displayHighScores(),this.soundManager.loadSounds()}initializeLevels(){this.levels.push(new r(1,2,1,1)),this.levels.push(new r(2,3,1.5,2)),this.levels.push(new r(3,4,2,2)),this.levels.push(new r(4,5,2.5,3)),this.levels.push(new r(5,6,3,3))}startGame(){const t=document.getElementById("start-screen");t&&(t.style.display="none"),this.score=0,this.level=1,this.time=60,this.isGameOver=!1,this.isGameRunning=!0,this.cars=[],this.powerUps=[],this.fartClouds=[],this.currentLevel=this.levels[0],this.frog=new i(this.canvas.width/2,this.canvas.height-50,this.canvas),window.requestAnimationFrame((t=>this.gameLoop(t)))}gameLoop(t){if(!this.isGameRunning)return;const s=this.lastTimestamp?(t-this.lastTimestamp)/1e3:0;this.lastTimestamp=t,this.updateTimer(s),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.update(s),this.draw(),this.checkCollisions(),this.checkLevelCompletion(),this.inputHandler.update(),this.time<=0?this.gameOver():this.isGameOver||window.requestAnimationFrame((t=>this.gameLoop(t)))}update(t){this.inputHandler.isKeyDown("ArrowLeft")&&this.frog.moveLeft(),this.inputHandler.isKeyDown("ArrowRight")&&this.frog.moveRight(),this.inputHandler.isKeyPressed(" ")&&this.frog.fart(),this.frog.update(t),this.spawnCars(t),this.spawnPowerUps(t),this.cars.forEach(((s,i)=>{s.update(t),s.isOffScreen()&&(this.cars.splice(i,1),this.increaseScore(10))})),this.powerUps.forEach(((s,i)=>{s.update(t),s.isOffScreen()&&this.powerUps.splice(i,1)})),this.fartClouds.forEach(((s,i)=>{s.update(t),s.isDissipated()&&this.fartClouds.splice(i,1)}))}draw(){this.drawBackground(),this.cars.forEach((t=>t.draw(this.ctx))),this.powerUps.forEach((t=>t.draw(this.ctx))),this.fartClouds.forEach((t=>t.draw(this.ctx))),this.frog.draw(this.ctx),this.updateUIElements()}drawBackground(){this.ctx.fillStyle="#444444",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.strokeStyle="#FFFFFF",this.ctx.setLineDash([20,15]);const t=this.canvas.height/6;for(let s=1;s<6;s++)this.ctx.beginPath(),this.ctx.moveTo(0,t*s),this.ctx.lineTo(this.canvas.width,t*s),this.ctx.stroke();this.ctx.setLineDash([])}spawnCars(t){const s=this.currentLevel.carSpawnRate*t;if(Math.random()<s){const t=this.canvas.height/6,s=Math.floor(5*Math.random())+1,i=s*t-t/2,h=s%2==0,r=h?-50:this.canvas.width+50,a=(h?1:-1)*(100*this.currentLevel.carSpeed*(.8+.4*Math.random())),o=new e(r,i,a,`car${Math.floor(3*Math.random())+1}`);this.cars.push(o)}}spawnPowerUps(s){const i=.01*s*this.currentLevel.powerUpRate;if(Math.random()<i&&this.powerUps.length<3){const s=Math.random()*(this.canvas.width-40)+20,i=Math.random()*(this.canvas.height-100)+50,e=[t.SHORT_FART,t.LONG_FART,t.CIRCLE_FART,t.SUPER_FART,t.MEGA_FART,t.ULTRA_FART],r=e[Math.floor(Math.random()*e.length)],a=new h(s,i,r);this.powerUps.push(a)}}checkCollisions(){for(const t of this.cars)if(this.collisionDetector.checkCollision(this.frog,t))return this.frog.hit(),void this.gameOver();for(let t=this.powerUps.length-1;t>=0;t--)if(this.collisionDetector.checkCollision(this.frog,this.powerUps[t])){const s=this.powerUps[t];this.frog.collectPowerUp(s.getFartType()),this.increaseScore(50),this.addTime(5),this.powerUps.splice(t,1)}for(const t of this.fartClouds)for(let s=this.cars.length-1;s>=0;s--)this.collisionDetector.checkCollision(t,this.cars[s])&&(this.cars[s].slowDown(),this.increaseScore(15))}checkLevelCompletion(){this.frog.getY()<=30&&this.levelComplete()}levelComplete(){this.level++;const t=100*this.level;this.increaseScore(t),this.addTime(10);const s=Math.min(this.level-1,this.levels.length-1);this.currentLevel=this.levels[s],this.frog.reset(this.canvas.width/2,this.canvas.height-50),document.getElementById("level").innerText=`Level: ${this.level}`}increaseScore(t){this.score+=t,document.getElementById("score").innerText=`Score: ${this.score}`}updateTimer(t){this.time-=t,this.time<0&&(this.time=0),document.getElementById("time").innerText=`Time: ${Math.ceil(this.time)}`}addTime(t){this.time+=t,document.getElementById("time").innerText=`Time: ${Math.ceil(this.time)}`}updateUIElements(){document.getElementById("score").innerText=`Score: ${this.score}`,document.getElementById("time").innerText=`Time: ${Math.ceil(this.time)}`,document.getElementById("level").innerText=`Level: ${this.level}`}gameOver(){this.isGameOver=!0,this.isGameRunning=!1;const t=document.getElementById("game-over-screen");t&&(t.style.display="flex");const s=document.getElementById("final-score");s&&(s.innerText=`Final Score: ${this.score}`),this.highScoreManager.addScore(this.score),this.displayHighScores()}restartGame(){const t=document.getElementById("game-over-screen");t&&(t.style.display="none"),this.startGame()}displayHighScores(){const t=this.highScoreManager.getScores(),s=document.getElementById("scores-list");s&&(s.innerHTML="",t.slice(0,5).forEach(((t,i)=>{const e=document.createElement("div");e.innerText=`${i+1}. ${t}`,s.appendChild(e)})))}}window.addEventListener("load",(()=>{(new c).initialize()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,